{"version":3,"sources":["src/index.es6"],"names":[],"mappings":";;;;AAEA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;;AAGrC,IAAM,MAAM,GAAG;AACd,IAAG,EAAA,aAAC,GAAG,EAAE,GAAG,EAAE;AACb,MAAM,GAAG,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;;AAE1D,KAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChB,KAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAEd,KAAG,CAAC,EAAE,CAAC,KAAK,EAAE,YAAM;AACnB,MAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACnB,MAAG,CAAC,GAAG,EAAE,CAAC;GACV,CAAC,CAAC;;;AAGH,KAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAG;UAAK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;EAC3C;;AAED,QAAO,EAAA,iBAAC,GAAG,EAAE,GAAG,EAAE;AACjB,KAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;EAEnB;;AAED,KAAI,EAAA,cAAC,GAAG,EAAE,GAAG,EAAE;AACd,KAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;EAEnB;;AAED,SAAQ,EAAA,kBAAC,GAAG,EAAE,GAAG,EAAE;AAClB,KAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACnB,KAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;EAC3B;CACD,CAAC;;AAGF,IAAI,CAAC,YAAY,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/B,KAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACpD,QAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEnB,KAAI;AACH,QAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACxB,CAAC,OAAO,CAAC,EAAE;AACX,MAAI,CAAC,YAAY,SAAS,EAAE;AAC3B,SAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;GAC1B,MACI;AACJ,SAAM,CAAC,CAAC;GACR;EACD,SAAS;AACT,KAAG,CAAC,GAAG,EAAE,CAAC;EACV;CAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;;AAE9B,OAAO,CAAC,GAAG,CAAC,2CAA2C,GAAG,IAAI,GAAG,yBAAyB,CAAC,CAAC","file":"src/index.es6","sourcesContent":["/* index.js */\n\nconst http = require('http');\nconst fs = require('fs');\nconst url = require('url');\nconst port = process.argv[2] || 8888;\n\n\nconst routes = {\n\tlog(req, res) {\n\t\tconst log = fs.createWriteStream('./log', { flags: 'a' });\n\n\t\tlog.write('\\n');\n\t\treq.pipe(log); // automatically calls log.end??\n\n\t\treq.on('end', () => {\n\t\t\tres.writeHead(200);\n\t\t\tres.end();\n\t\t});\n\n\t\t// This is here incase any errors occur\n\t\tlog.on('error', (err) => console.log(err));\n\t},\n\n\tpayload(req, res) {\n\t\tres.writeHead(200);\n\t\t// res.end();\n\t},\n\n\tdata(req, res) {\n\t\tres.writeHead(200);\n\t\t// res.end();\n\t},\n\n\tnotFound(req, res) {\n\t\tres.writeHead(404);\n\t\tres.write('404 not found');\n\t}\n};\n\n\nhttp.createServer((req, res) => {\n\tconst route = url.parse(req.url).pathname.substr(1);\n\tconsole.log(route);\n\n\ttry {\n\t\troutes[route](req, res);\n\t} catch (e) {\n\t\tif (e instanceof TypeError) {\n\t\t\troutes.notFound(req, res);\n\t\t}\n\t\telse {\n\t\t\tthrow e;\n\t\t}\n\t} finally {\n\t\tres.end();\n\t}\n\n}).listen(parseInt(port, 10));\n\nconsole.log(\"Server running at\\n  => http://localhost:\" + port + \"/\\nCTRL + C to shutdown\");\n"]}